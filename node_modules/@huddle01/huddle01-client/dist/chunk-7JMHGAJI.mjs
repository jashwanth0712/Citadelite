import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/utils/helpers.ts
var sliceAddress = (address) => `${address.slice(0, 6)}...${address.slice(-5)}`;
var enumerateMediaDevices = async () => {
  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
    logger_default.error("enumerateDevices() not supported.");
  }
  let devices;
  try {
    devices = await navigator.mediaDevices.enumerateDevices();
  } catch (error) {
    logger_default.error({ type: "error", location: "enumerateDevices()", error });
  }
  return devices || [];
};
var helpers_default = sliceAddress;
var lastId = 0;
var randomId = (prefix = "id") => {
  lastId += 1;
  return `${prefix}${lastId}`;
};
var getRandomText = (length) => {
  const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let text = "";
  for (let i = 0; i < length; i += 1) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
};
var isWebsiteLink = (text) => {
  if (!text)
    return false;
  const regex = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?/;
  const withoutHttp = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_+.~#?&//=]*)$/;
  return regex.test(text) || withoutHttp.test(text);
};
var hasHttporHttps = (text) => {
  if (!text)
    return false;
  const regex = /^(http|https):\/\//;
  return regex.test(text);
};
var genRanHex = (size) => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join("");
var portalUuid = () => {
  const getHex = genRanHex(16);
  return getHex.toString();
};

export {
  enumerateMediaDevices,
  helpers_default,
  randomId,
  getRandomText,
  isWebsiteLink,
  hasHttporHttps,
  portalUuid
};
