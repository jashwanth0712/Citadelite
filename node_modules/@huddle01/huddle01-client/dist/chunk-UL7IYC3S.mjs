import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/store/createPeersSlice.ts
var MediaConsumerTypesObj = {
  cam: "isCamPaused",
  mic: "isMicPaused",
  share: "isSharePaused",
  shareAudio: "isShareAudioPaused"
};
var createPeersSlice = (set, get) => ({
  peerCount: 0,
  peers: {},
  increasePeerCount: (value = 1) => {
    set((state) => ({ peerCount: state.peerCount + value }));
    logger_default.info({
      message: "increasePeerCount",
      peerCount: get().peerCount
    });
  },
  decreasePeerCount: (value = 1) => {
    if (get().peerCount < value) {
      logger_default.error({
        message: "decreacePeerCount | peerCount is not sufficient",
        peerCount: get().peerCount
      });
      return;
    }
    set((state) => ({ peerCount: state.peerCount - value }));
    logger_default.info({
      message: "decreacePeerCount",
      peerCount: get().peerCount
    });
  },
  addPeer: (peerId, peer) => {
    const prevPeers = get().peers;
    set(() => ({
      peers: {
        ...prevPeers,
        [peerId]: peer
      }
    }));
  },
  removePeer: (peerId) => {
    const peers = get().peers;
    delete peers[peerId];
    set(() => ({
      peers: {
        ...peers
      }
    }));
  },
  addConsumerMedia: (peerId, consumerType, consumer) => {
    const peer = get().peers[peerId];
    set(() => {
      var _a, _b, _c, _d;
      return {
        peers: {
          ...get().peers,
          [peerId]: {
            ...peer,
            consumers: {
              mic: (_a = peer.consumers) == null ? void 0 : _a.mic,
              cam: (_b = peer.consumers) == null ? void 0 : _b.cam,
              share: (_c = peer.consumers) == null ? void 0 : _c.share,
              shareAudio: (_d = peer.consumers) == null ? void 0 : _d.shareAudio,
              [consumerType]: consumer
            },
            [MediaConsumerTypesObj[consumerType]]: false,
            isSharePaused: consumerType === "share"
          }
        }
      };
    });
  },
  removeConsumerMedia: (peerId, consumerType) => {
    var _a, _b;
    const peers = get().peers;
    if (!peers[peerId])
      return;
    (_b = (_a = peers[peerId]) == null ? void 0 : _a.consumers) == null ? true : delete _b[consumerType];
    set(() => ({
      peers: {
        ...peers,
        [peerId]: {
          ...peers[peerId],
          [MediaConsumerTypesObj[consumerType]]: true
        }
      }
    }));
  },
  pauseConsumerMedia: (peerId, consumerType) => {
    const peers = get().peers;
    if (!peers[peerId])
      return;
    set(() => ({
      peers: {
        ...peers,
        [peerId]: {
          ...peers[peerId],
          [MediaConsumerTypesObj[consumerType]]: true
        }
      }
    }));
  },
  resumeConsumerMedia(peerId, consumerType) {
    const peers = get().peers;
    if (!peers[peerId])
      return;
    set(() => ({
      peers: {
        ...peers,
        [peerId]: {
          ...peers[peerId],
          [MediaConsumerTypesObj[consumerType]]: false
        }
      }
    }));
  },
  togglePeerHandRaise(peerId, isHandRaised) {
    const peers = get().peers;
    if (!peers[peerId])
      return;
    set(() => ({
      peers: {
        ...peers,
        [peerId]: {
          ...peers[peerId],
          isHandRaised
        }
      }
    }));
  },
  updatePeers: (peerId, consumerType, value) => {
    const prevPeers = get().peers;
    const updatedPeers = {
      ...prevPeers,
      [peerId]: {
        ...prevPeers[peerId],
        [consumerType]: value
      }
    };
    set(() => ({
      peers: {
        ...updatedPeers
      }
    }));
  },
  addReaction: (peerId, reaction) => {
    const prevPeers = get().peers;
    const prevPeer = prevPeers[peerId];
    delete prevPeers[peerId];
    set(() => ({
      peers: {
        ...prevPeers,
        [peerId]: {
          ...prevPeer,
          reaction
        }
      }
    }));
    setTimeout(() => {
      get().removeReaction(peerId);
    }, 5e3);
  },
  removeReaction: (peerId) => {
    const prevPeers = get().peers;
    const prevPeer = prevPeers[peerId];
    delete prevPeers[peerId];
    set(() => ({
      peers: {
        ...prevPeers,
        [peerId]: {
          ...prevPeer,
          reaction: ""
        }
      }
    }));
  },
  setPeerAvatarUrl(peerId, url) {
    const prevPeers = get().peers;
    const prevPeer = prevPeers[peerId];
    delete prevPeers[peerId];
    set(() => ({
      peers: {
        ...prevPeers,
        [peerId]: {
          ...prevPeer,
          avatarUrl: url
        }
      }
    }));
  }
});
var createPeersSlice_default = createPeersSlice;

export {
  createPeersSlice_default
};
