import { IPeerStoreState, IMeInitState, MediaConsumerTypes, MediaConsumer, IDeviceSwitch, INewPeerState, GridViewTypes, TNetStats, Reaction, ILobbyPeer, IDropReason, TSharedFile, THostControls, IHostState, IRecordingType, TNotifSounds, IStreamingPlatform, IStreamData, ILayoutSchemaType } from '../../store/storeTypes.js';
import 'zustand';
import '../../schema/enums/EHostControlType.js';

declare class HuddleStore {
    protected addPeerPort(peerId: string): void;
    protected removePeerPort(peerId: string): void;
    protected getProducerState(producerType: 'cam' | 'mic' | 'share'): boolean;
    protected getAvatarUrl(): string;
    protected getCamStream(): MediaStream | null;
    protected getMicStream(): MediaStream | null;
    protected getUserGeoLocation(): string;
    protected getDisplayName(): string;
    protected getPeerDisplayName(peerId: string): string;
    protected getParticipants(): {
        [peerId: string]: IPeerStoreState;
    };
    protected getJoinedState(): boolean;
    protected enableMicStream(): Promise<void>;
    protected enableCamStream(): Promise<void>;
    protected disableMicStream(): void;
    protected disableCamStream(): void;
    protected toggleFigmentStream(toggle: 'enable' | 'disable' | 'switch'): void;
    protected changePeerAvatarUrl(peerId: string, avatarUrl: string): void;
    protected setMeAvatarUrl(avatarUrl: string): void;
    protected initMe(meInit: IMeInitState): void;
    addProducerMedia(producerType: MediaConsumerTypes, producer: MediaConsumer): void;
    removeProducerMedia(producerType: MediaConsumerTypes): void;
    updateProducerMedia(producerType: MediaConsumerTypes, producer: MediaConsumer): void;
    toggleProducerMedia(producerType: MediaConsumerTypes, value: IDeviceSwitch): void;
    addPeer(peerId: string, peer: INewPeerState): void;
    removePeer(peerId: string): void;
    peerExists(peerId: string): boolean;
    getPeerIds(): string[];
    addConsumerMedia(peerId: string, consumerType: MediaConsumerTypes, consumer: MediaConsumer): void;
    removeConsumerMedia(peerId: string, consumerType: MediaConsumerTypes): void;
    pauseConsumerMedia(peerId: string, consumerType: MediaConsumerTypes): void;
    resumeConsumerMedia(peerId: string, consumerType: MediaConsumerTypes): void;
    updateProducer(producerType: MediaConsumerTypes, value: any): void;
    enableScreenShare(peerId: string): void;
    disableScreenShare(gridView: GridViewTypes): void;
    setNetworkStats(stats: TNetStats): void;
    setTest(): void;
    toggleRecording(started: boolean): void;
    setNotifyRecording(key: 'started' | 'finished', value: boolean): void;
    setChat(message: string, toId: string, fromId: string, timestamp: string): void;
    togglePeerHandRaise(peerId: string, isHandRaised: boolean): void;
    toggleMeHandRaise(isHandRaised: boolean): void;
    addReaction(peerId: string, reaction: Reaction): void;
    addMeReaction(reaction: Reaction): void;
    addLobbyPeer(peers: ILobbyPeer[]): void;
    setDropState(dropReason: IDropReason): void;
    setJoined(): void;
    setRoomId(roomId: string): void;
    setCreatedAt(createdAt: number): void;
    removeChat(peerId: string): void;
    increaseUnread(peerId: string): void;
    removeUnread(peerId: string): void;
    addSharedFile(sharedFile: TSharedFile): void;
    setSharedFiles(sharedFiles: TSharedFile[]): void;
    isMicPaused(): boolean;
    initHostControls(hostId: string, meId: string, hostControls: THostControls, coHostIds: string[] | undefined): void;
    setSingleHostControl(control: keyof THostControls, val: boolean): void;
    setHost(hostId: string): void;
    setCoHosts(coHostIds: string[]): void;
    setHostState(hostState: IHostState): void;
    increasePeerCount(value?: number): void;
    decreasePeerCount(value?: number): void;
    setStartRecording(): void;
    setStopRecording(): void;
    setMediaDevice(mediaDevice: MediaDeviceInfo): void;
    setAudioDevice(audioDevice: MediaDeviceInfo): void;
    recordingStatus(): boolean;
    updateRecording(recording: IRecordingType): void;
    setRecordings(recordings: IRecordingType[]): void;
    setRecordingEnded(): void;
    getIsRoomJoined(): boolean;
    getMaxViewPortCount(): number;
    getActiveViewPort(): number;
    getLastNActive(): boolean;
    getLastNPeerIds(): string[];
    getSpaceLeftInLastN(): number;
    setNotificationSounds(sounds: TNotifSounds): void;
    setLastNPeerIds(peerIds: string[]): void;
    setLastNForNewPeerJoined(): void;
    setRoomLockState(isRoomLocked: boolean): void;
    getRoomLockState(): boolean;
    addMissingPeerToLastN(): void;
    addPeerToLastN(peerId: string): void;
    removePeerFromLastN(peerId: string): void;
    addActiveViewPort(value?: number): void;
    removeActiveViewPort(value?: number): void;
    addStreamToHark(stream: MediaStreamTrack, peerId: string): void;
    removeStreamFromHark(peerId: string): void;
    disableAllCamStreams(): Promise<void>;
    getActiveViewPortIds(): Set<string>;
    getSpaceLeftInViewport(): number;
    setActiveViewPort(activeViewPortIds: string[]): void;
    addPeerViewPort(peerId: string): void;
    removePeerViewPort(peerId: string): void;
    isLastNActive(): boolean;
    activateLastN(): void;
    deactivateLastN(): void;
    setActiveViewPortForNewPeer(): void;
    startStreaming(platform: IStreamingPlatform): void;
    setStreamPlatform(platform: IStreamingPlatform): void;
    stopStreaming(platform: IStreamingPlatform): void;
    setStreamData(platform: IStreamingPlatform, streamData: IStreamData): void;
    setLayoutView(type: ILayoutSchemaType): void;
    getLayout(): {
        type: ILayoutSchemaType;
    };
    setScreenShareLayout(isBot: boolean | undefined, viewType: ILayoutSchemaType): void;
    getBandwidthSaver(): boolean;
}

export { HuddleStore };
