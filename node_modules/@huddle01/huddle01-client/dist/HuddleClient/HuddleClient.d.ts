import { TWalletData } from '../schema/index.js';
import { Reaction, THostControls, MediaConsumerTypes, IDropReason } from '../store/storeTypes.js';
import { EEnableHostControl, EDisableHostControl } from '../schema/enums/EHostControlType.js';
import { types } from 'mediasoup-client';
import { RoomMediasoupClient } from './lib/RoomMediasoupClient.js';
import '../store/store.js';
import 'zustand';
import '../store/portStore/usePortStore.js';
import './lib/RoomSocketClient.js';
import './lib/HuddleStore.js';
import 'protoo-client';

declare class HuddleClient extends RoomMediasoupClient {
    roomId: string | null;
    hostId: string | null;
    peerId: string;
    produce: boolean;
    _webcamProducer: null | types.Producer;
    _shareVideoProducer: null | types.Producer;
    _shareAudioProducer: null | types.Producer;
    micProducer: null | types.Producer;
    _loading: boolean;
    _chatDataProducer: null | types.DataProducer;
    _useDataChannel: boolean;
    _bot: boolean;
    joining: boolean;
    constructor(peerId: string, isBot: boolean, apiKey?: string);
    get isBot(): boolean;
    changeAvatarUrl(avatarUrl: string): Promise<void>;
    sendDM(message: string, toId: string, fromId: string): Promise<void>;
    toggleRaiseHand(isHandRaised: boolean): Promise<void>;
    sendReaction(reaction: Reaction): Promise<void>;
    allowLobbyPeerToJoinRoom(peerIdToAdmit: string): Promise<void>;
    allowAllLobbyPeersToJoinRoom(): Promise<void>;
    disallowLobbyPeerFromJoiningRoom(peerIdToDisallow: string): Promise<void>;
    disallowAllLobbyPeerFromJoiningRoom(): Promise<void>;
    requestLobby(displayName: string, avatarUrl: string, walletData: TWalletData): Promise<void>;
    join(roomId: string, walletData: TWalletData): Promise<void>;
    joinRoom(): Promise<void>;
    enableWebcam(figmentDisable?: boolean): Promise<void>;
    disableWebcam(figmentDisable?: boolean): Promise<void>;
    changeWebcam(mediaDevice?: MediaDeviceInfo): Promise<void>;
    pauseVideo(): Promise<void>;
    disableMic(): Promise<void>;
    enableMic(): Promise<void>;
    changeMic(audioDevice: MediaDeviceInfo): Promise<void>;
    muteMic(): Promise<void>;
    unmuteMic(): Promise<void>;
    enableShare(): Promise<void>;
    disableShare(): Promise<void>;
    emailRecording(to: string, url: string): Promise<void>;
    getClientNetworkStats(): Promise<any>;
    handleEnableHostControl(control: EEnableHostControl, controlType: keyof THostControls): Promise<void>;
    handleDisableHostControl(control: EDisableHostControl, controlType: keyof THostControls): Promise<void>;
    makeACohost(coHostId: string): Promise<void>;
    removeACohost(coHostId: string): Promise<void>;
    kickPeerFromRoom(peerIdToKick: string): Promise<void>;
    closeRoomForEverybody(): Promise<void>;
    disablePeerMic(peerId: string): Promise<void>;
    disablePeerCam(peerId: string): Promise<void>;
    muteEveryone(): Promise<void>;
    toggleRoomLock(): Promise<void>;
    pauseConsumer(consumerId: string, peerId: string, type: MediaConsumerTypes): Promise<void>;
    resumeConsumer(consumerId: string, peerId: string, type: MediaConsumerTypes): Promise<void>;
    toggleBandwidthSaver(toggle: boolean): Promise<void>;
    close(dropReason?: IDropReason): void;
}

export { HuddleClient as default };
