import {
  MediaConsumerTypesObj
} from "./chunk-LRNXPFD3.mjs";

// src/store/createMeSlice.ts
var createMeSlice = (set, get) => ({
  peerId: "",
  geo: "",
  displayName: "",
  avatarUrl: "",
  isSharePaused: true,
  isCamPaused: false,
  isMicPaused: false,
  isHandRaised: false,
  reaction: "",
  producers: {
    cam: void 0,
    mic: void 0,
    share: void 0,
    shareAudio: void 0
  },
  initMe: (meInit) => {
    set(meInit);
  },
  setMe: (consumerType, value) => {
    set(() => ({
      [consumerType]: value
    }));
  },
  setGeo: (geo) => {
    set(() => ({
      geo
    }));
  },
  setAvatarUrl: (avatarUrl) => {
    set(() => ({
      avatarUrl
    }));
  },
  addProducerMedia: (producerType, producer) => {
    const producerTracks = get().producers;
    set(() => ({
      producers: {
        ...producerTracks,
        [producerType]: producer
      },
      [MediaConsumerTypesObj[producerType]]: false
    }));
  },
  removeProducerMedia: (producerType) => {
    const producerTracks = get().producers;
    delete producerTracks[producerType];
    set(() => ({
      producers: {
        ...producerTracks
      },
      [MediaConsumerTypesObj[producerType]]: true
    }));
  },
  toggleProducerMedia: (producerType, value) => {
    set(() => ({
      [MediaConsumerTypesObj[producerType]]: value === "off"
    }));
  },
  updateProducerMedia(producerType, producer) {
    const producerTracks = get().producers;
    set(() => ({
      producers: {
        ...producerTracks,
        [producerType]: producer
      }
    }));
  },
  toggleMeHandRaise: (isHandRaised) => {
    set(() => ({
      isHandRaised
    }));
  },
  addMeReaction: (reaction) => {
    set(() => ({
      reaction
    }));
    setTimeout(() => {
      get().rmMeReaction();
    }, 5e3);
  },
  rmMeReaction: () => {
    set(() => ({
      reaction: ""
    }));
  }
});
var createMeSlice_default = createMeSlice;

export {
  createMeSlice_default
};
