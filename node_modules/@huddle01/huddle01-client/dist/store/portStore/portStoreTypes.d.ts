import { SetState, GetState } from 'zustand';

declare type StoreSlice<T extends object, E extends object = T> = (set: SetState<E extends T ? E : E & T>, get: GetState<E extends T ? E : E & T>) => T;
interface ITestState {
    isTest: boolean;
    toggleIsTest: () => void;
}
interface IPeerAudioState {
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
}
interface IViewPortState {
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
}
declare type IPortState = ITestState & IPeerAudioState & IViewPortState;

export { IPeerAudioState, IPortState, ITestState, IViewPortState, StoreSlice };
