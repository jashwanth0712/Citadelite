import * as zustand from 'zustand';
import { GetState } from 'zustand';

declare const usePortStore: zustand.UseBoundStore<Omit<zustand.StoreApi<{
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
}>, "setState"> & {
    setState(partial: {
        isLastNActive: boolean;
        activeViewPortCount: number;
        activeViewPortIds: Set<string>;
        maxViewPortCount: number;
        activateLastN: () => void;
        deactivateLastN: () => void;
        getActiveViewPortIds: () => Set<string>;
        getSpaceLeftInViewport: () => number;
        setActiveViewPort: (activeViewPortIds: string[]) => void;
        addPeerViewPort: (peerId: string) => void;
        removePeerViewPort(peerId: string): void;
        peers: Set<string>;
        addPeerPort: (peer: string) => void;
        removePeerPort: (peer: string) => void;
        isTest: boolean;
        toggleIsTest: () => void;
    } | Partial<{
        isLastNActive: boolean;
        activeViewPortCount: number;
        activeViewPortIds: Set<string>;
        maxViewPortCount: number;
        activateLastN: () => void;
        deactivateLastN: () => void;
        getActiveViewPortIds: () => Set<string>;
        getSpaceLeftInViewport: () => number;
        setActiveViewPort: (activeViewPortIds: string[]) => void;
        addPeerViewPort: (peerId: string) => void;
        removePeerViewPort(peerId: string): void;
        peers: Set<string>;
        addPeerPort: (peer: string) => void;
        removePeerPort: (peer: string) => void;
        isTest: boolean;
        toggleIsTest: () => void;
    }> | ((state: {
        isLastNActive: boolean;
        activeViewPortCount: number;
        activeViewPortIds: Set<string>;
        maxViewPortCount: number;
        activateLastN: () => void;
        deactivateLastN: () => void;
        getActiveViewPortIds: () => Set<string>;
        getSpaceLeftInViewport: () => number;
        setActiveViewPort: (activeViewPortIds: string[]) => void;
        addPeerViewPort: (peerId: string) => void;
        removePeerViewPort(peerId: string): void;
        peers: Set<string>;
        addPeerPort: (peer: string) => void;
        removePeerPort: (peer: string) => void;
        isTest: boolean;
        toggleIsTest: () => void;
    }) => {
        isLastNActive: boolean;
        activeViewPortCount: number;
        activeViewPortIds: Set<string>;
        maxViewPortCount: number;
        activateLastN: () => void;
        deactivateLastN: () => void;
        getActiveViewPortIds: () => Set<string>;
        getSpaceLeftInViewport: () => number;
        setActiveViewPort: (activeViewPortIds: string[]) => void;
        addPeerViewPort: (peerId: string) => void;
        removePeerViewPort(peerId: string): void;
        peers: Set<string>;
        addPeerPort: (peer: string) => void;
        removePeerPort: (peer: string) => void;
        isTest: boolean;
        toggleIsTest: () => void;
    } | Partial<{
        isLastNActive: boolean;
        activeViewPortCount: number;
        activeViewPortIds: Set<string>;
        maxViewPortCount: number;
        activateLastN: () => void;
        deactivateLastN: () => void;
        getActiveViewPortIds: () => Set<string>;
        getSpaceLeftInViewport: () => number;
        setActiveViewPort: (activeViewPortIds: string[]) => void;
        addPeerViewPort: (peerId: string) => void;
        removePeerViewPort(peerId: string): void;
        peers: Set<string>;
        addPeerPort: (peer: string) => void;
        removePeerPort: (peer: string) => void;
        isTest: boolean;
        toggleIsTest: () => void;
    }>), replace?: boolean | undefined, actionType?: string | {
        type: unknown;
    } | undefined): void;
}>;
declare const getState: GetState<{
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
}>;
declare const setState: (partial: {
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
} | Partial<{
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
}> | ((state: {
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
}) => {
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
} | Partial<{
    isLastNActive: boolean;
    activeViewPortCount: number;
    activeViewPortIds: Set<string>;
    maxViewPortCount: number;
    activateLastN: () => void;
    deactivateLastN: () => void;
    getActiveViewPortIds: () => Set<string>;
    getSpaceLeftInViewport: () => number;
    setActiveViewPort: (activeViewPortIds: string[]) => void;
    addPeerViewPort: (peerId: string) => void;
    removePeerViewPort(peerId: string): void;
    peers: Set<string>;
    addPeerPort: (peer: string) => void;
    removePeerPort: (peer: string) => void;
    isTest: boolean;
    toggleIsTest: () => void;
}>), replace?: boolean | undefined, actionType?: string | {
    type: unknown;
} | undefined) => void;

export { usePortStore as default, getState, setState };
