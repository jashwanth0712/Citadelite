import {
  HuddleStore
} from "./chunk-LOTGT65Q.mjs";
import {
  getProtooUrl
} from "./chunk-CXN4ICOT.mjs";
import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/HuddleClient/lib/RoomSocketClient.ts
import protooClient from "protoo-client";
var RoomSocketClient = class extends HuddleStore {
  constructor(apiKey) {
    super();
    this.socket = null;
    this.apiKey = apiKey;
  }
  getSocket(roomId, peerId) {
    const protooUrl = getProtooUrl({
      roomId,
      peerId,
      apiKey: this.apiKey
    });
    const protooTransport = new protooClient.WebSocketTransport(protooUrl);
    const socket = new protooClient.Peer(protooTransport);
    return socket;
  }
  setSocket(roomId, peerId) {
    const protooUrl = getProtooUrl({
      roomId,
      peerId,
      apiKey: this.apiKey
    });
    const protooTransport = new protooClient.WebSocketTransport(protooUrl);
    this.socket = new protooClient.Peer(protooTransport);
    logger_default.info({ type: "info", message: "setSocket", socket: this.socket });
  }
  async startRecording({
    address,
    sourceUrl
  }) {
    if (!this.socket)
      return;
    if (this.recordingStatus())
      return;
    try {
      this.setStartRecording();
      await this.socket.request("startRecording", { address, sourceUrl });
    } catch (error) {
      logger_default.error({ type: "error", message: "startRecording", error });
      throw new Error("Error starting recording");
    }
  }
  async stopRecording({ ipfs }) {
    if (!this.socket)
      return;
    if (!this.recordingStatus())
      return;
    try {
      await this.socket.request("stopRecording", { ipfs });
      this.setStopRecording();
    } catch (error) {
      logger_default.error({ type: "error", message: "stopRecording", error });
    }
  }
  async startLiveStreaming(platform, streamObj, sourceUrl) {
    if (!this.socket)
      return;
    try {
      this.startStreaming(platform);
      if (streamObj) {
        await this.socket.request("startStreaming", {
          platform,
          rtmpEndpoint: `${streamObj.streamLink}/${streamObj.streamKey}`,
          sourceUrl
        });
      } else
        await this.socket.request("startStreaming", { platform });
      logger_default.info({
        streamObj
      });
    } catch (error) {
      logger_default.error({ type: "error", message: "startStreaming", error });
      throw new Error("Error while starting streamer");
    }
  }
  async stopLiveStreaming(platform) {
    if (!this.socket)
      return;
    try {
      this.stopStreaming(platform);
      await this.socket.request("stopStreaming");
    } catch (error) {
      logger_default.error({ type: "error", message: "stopStreaming", error });
    }
  }
  async newSharedFile(fileDetails) {
    if (!this.socket)
      return;
    try {
      await this.socket.request("sendData", {
        type: "sharedFile",
        payload: fileDetails
      });
    } catch (error) {
      logger_default.error({ type: "error", message: "stopStreaming", error });
    }
  }
};

export {
  RoomSocketClient
};
