import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/store/portStore/createViewPortSlice.ts
var createViewPortSlice = (set, get) => ({
  isLastNActive: false,
  activeViewPortIds: /* @__PURE__ */ new Set(),
  activeViewPortCount: 0,
  maxViewPortCount: 7,
  getSpaceLeftInViewport: () => get().maxViewPortCount - get().activeViewPortCount,
  getActiveViewPortIds: () => get().activeViewPortIds,
  activateLastN: () => {
    const spaceLeft = get().getSpaceLeftInViewport();
    if (spaceLeft === 0) {
      logger_default.info({
        type: "ViewPortStore",
        message: "activateLastN() | no space left in viewport"
      });
      set({ isLastNActive: true });
    }
  },
  deactivateLastN: () => {
    const activeViewPortCount = get().activeViewPortCount;
    if (activeViewPortCount <= get().maxViewPortCount) {
      logger_default.info({
        type: "ViewPortStore",
        message: "deactivateLastN() | deactivating last n"
      });
      set({
        isLastNActive: false
      });
    }
  },
  setActiveViewPort: (activeViewPortIds) => {
    logger_default.info({
      activeViewPortIds,
      message: "Setting active view port ids",
      meta: {
        activeViewPortIds
      }
    });
    const initViewPortCount = activeViewPortIds.length;
    let lastNStatus = get().isLastNActive;
    if (initViewPortCount < get().maxViewPortCount) {
      logger_default.info({
        message: "setActiveViewPort() | Setting lastNStatus to false as less peers joined",
        meta: {
          initViewPortCount,
          maxViewPortCount: get().maxViewPortCount
        }
      });
      lastNStatus = false;
    }
    const activeViewPortSet = new Set(activeViewPortIds);
    set({
      isLastNActive: lastNStatus,
      activeViewPortIds: activeViewPortSet,
      activeViewPortCount: initViewPortCount
    });
  },
  addPeerViewPort: (peerId) => {
    logger_default.info({
      peerId,
      message: "Adding peer view port",
      meta: {
        peerId
      }
    });
    const activeViewPortCount = get().activeViewPortCount;
    if (activeViewPortCount < get().maxViewPortCount) {
      logger_default.info({
        message: "addPeerViewPort() | Adding peer to active view port ids",
        meta: {
          peerId,
          activeViewPortCount,
          maxViewPortCount: get().maxViewPortCount
        }
      });
      const activeViewPortIds = get().activeViewPortIds;
      activeViewPortIds.add(peerId);
      set({
        activeViewPortIds,
        activeViewPortCount: activeViewPortCount + 1
      });
    }
  },
  removePeerViewPort(peerId) {
    logger_default.info({
      peerId,
      message: "Removing peer view port",
      meta: {
        peerId
      }
    });
    const activeViewPortCount = get().activeViewPortCount;
    const activeViewPortIds = get().activeViewPortIds;
    if (activeViewPortIds.has(peerId) && activeViewPortCount > 0) {
      logger_default.info({
        message: "removePeerViewPort() | Removing peer from active view port ids",
        meta: {
          peerId,
          activeViewPortCount,
          maxViewPortCount: get().maxViewPortCount
        }
      });
      activeViewPortIds.delete(peerId);
      set({
        activeViewPortIds,
        activeViewPortCount: activeViewPortCount - 1
      });
    }
  }
});
var createViewPortSlice_default = createViewPortSlice;

export {
  createViewPortSlice_default
};
