import {
  initFigment
} from "./chunk-E3J4KYLN.mjs";
import {
  VIDEO_CONSTRAINS
} from "./chunk-SQKZRIEU.mjs";
import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/store/createFigmentSlice.ts
var createFigmentSlice = (set, get) => ({
  isFigmentEnabled: false,
  figment: {
    figmentType: "enable",
    figmentStream: null,
    figmentstreamError: null,
    figmentLoading: false
  },
  enableFigmentCamStream: async (mediaDevice) => {
    if (get().isFigmentEnabled) {
      logger_default.info({
        type: "info",
        msg: "Figment stream already enabled"
      });
      return;
    }
    const deviceEnabledConstrains = {
      video: {
        ...VIDEO_CONSTRAINS.hd,
        deviceId: mediaDevice == null ? void 0 : mediaDevice.deviceId
      }
    };
    logger_default.info("Enabling new figment stream");
    const prevFigmentStream = get().figment;
    await navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {
      set(() => ({
        figment: {
          ...prevFigmentStream,
          figmentStream: _stream,
          figmentLoading: false
        },
        isFigmentEnabled: true
      }));
    }).catch((_error) => {
      set(() => ({
        figment: {
          ...prevFigmentStream,
          figmentstreamError: {
            type: _error.name,
            blocked: _error.name === "NotAllowedError"
          },
          figmentLoading: false
        },
        isFigmentEnabled: false
      }));
    });
  },
  disableFigmentStream: () => {
    const {
      figment: { figmentStream }
    } = get();
    if (!figmentStream) {
      logger_default.info({
        type: "error",
        message: "figmentStream is null"
      });
      return;
    }
    figmentStream.getTracks().forEach((track) => track.stop());
    set(() => ({
      figment: { ...get().figment, figmentStream: null, figmentLoading: false },
      isFigmentEnabled: false
    }));
  },
  setFigmentStream: (stream) => {
    set(() => ({
      figment: { ...get().figment, figmentStream: stream }
    }));
  },
  setFigmentStreamError: (error) => {
    set(() => ({
      figment: {
        ...get().figment,
        figmentstreamError: {
          type: error || "UnknownError",
          blocked: error === "NotAllowedError"
        }
      }
    }));
  },
  setFigmentEnabled: (isFigmentEnabled) => {
    set(() => ({
      isFigmentEnabled
    }));
  },
  toggleFigmentType: (figmentType) => {
    logger_default.info("toggleFigmentType", { figmentType });
    set(() => ({
      figment: {
        ...get().figment,
        figmentType
      }
    }));
  },
  toggleFigmentStream: async (streamState) => {
    if (streamState === "enable" && !get().figment.figmentStream) {
      logger_default.info({
        type: "info",
        msg: "Figment Stream Init, Cam Stream Returned"
      });
      await get().enableFigmentCamStream();
      return;
    }
    if (streamState === "switch") {
      logger_default.info({
        type: "info",
        msg: "Toggling figment stream"
      });
      get().disableFigmentStream();
      logger_default.info({
        type: "info",
        msg: "Disable figment stream",
        figment: get().figment.figmentStream
      });
      await get().enableFigmentCamStream();
      logger_default.info({
        type: "info",
        msg: "Enable figment stream",
        figment: get().figment.figmentStream
      });
      return;
    }
    if (streamState === "disable") {
      get().disableFigmentStream();
    } else {
      logger_default.error({
        type: "error",
        message: "toggleFigmentStream: invalid streamState",
        streamState
      });
    }
  },
  initFigmentStream: async () => {
    const stream = get().figment.figmentStream;
    if (stream && get().isFigmentEnabled) {
      const figTrack = await initFigment(stream);
      logger_default.info({ figTrack, stream, isSame: figTrack === stream });
      get().setFigmentStream(figTrack);
      logger_default.info({
        type: "info",
        msg: "Figment Stream Initialised finally",
        figment: figTrack
      });
    }
    if (!stream) {
      logger_default.error({
        type: "error",
        message: "Figment Stream is null",
        stream
      });
    }
  }
});
var createFigmentSlice_default = createFigmentSlice;

export {
  createFigmentSlice_default
};
