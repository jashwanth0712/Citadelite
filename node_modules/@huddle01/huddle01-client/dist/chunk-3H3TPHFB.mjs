import {
  RoomSocketClient
} from "./chunk-44HRVHPL.mjs";
import {
  PC_PROPRIETARY_CONSTRAINTS
} from "./chunk-SQKZRIEU.mjs";
import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/HuddleClient/lib/RoomMediasoupClient.ts
import { Device } from "mediasoup-client";
var RoomMediasoupClient = class extends RoomSocketClient {
  constructor(apiKey) {
    super(apiKey);
    this.consumers = /* @__PURE__ */ new Map();
    this._turn = [];
    this.mediasoupDevice = null;
    this.sendTransport = null;
    this.recvTransport = null;
  }
  async createMediasoupTransport(producing, consuming) {
    if (!this.mediasoupDevice || !this.socket)
      return;
    const transportInfo = await this.socket.request("createWebRtcTransport", {
      producing,
      consuming,
      sctpCapabilities: this.mediasoupDevice.sctpCapabilities
    });
    return transportInfo;
  }
  async createSendTransport() {
    if (!this.mediasoupDevice || !this.socket)
      return;
    const transportInfo = await this.createMediasoupTransport(true, false);
    const { id, iceParameters, iceCandidates, dtlsParameters, sctpParameters } = transportInfo;
    this.sendTransport = this.mediasoupDevice.createSendTransport({
      id,
      iceParameters,
      iceCandidates,
      dtlsParameters,
      sctpParameters,
      iceServers: this._turn,
      proprietaryConstraints: PC_PROPRIETARY_CONSTRAINTS
    });
    this.sendTransport.on(
      "connect",
      ({ dtlsParameters: dtlsParameters2 }, callback, errback) => {
        var _a, _b;
        (_b = this.socket) == null ? void 0 : _b.request("connectWebRtcTransport", {
          transportId: (_a = this.sendTransport) == null ? void 0 : _a.id,
          dtlsParameters: dtlsParameters2
        }).then(callback).catch(errback);
      }
    );
    this.sendTransport.on(
      "produce",
      async ({ kind, rtpParameters, appData }, callback, errback) => {
        var _a, _b;
        try {
          const { id: id2 } = await ((_b = this.socket) == null ? void 0 : _b.request("produce", {
            transportId: (_a = this.sendTransport) == null ? void 0 : _a.id,
            kind,
            rtpParameters,
            appData,
            paused: appData.type === "mic" ? this.isMicPaused() : false
          }));
          callback({ id: id2 });
        } catch (error) {
          errback(error);
        }
      }
    );
    this.sendTransport.on(
      "producedata",
      async ({ sctpStreamParameters, label, protocol, appData }, callback, errback) => {
        var _a, _b;
        try {
          const { id: id2 } = await ((_b = this.socket) == null ? void 0 : _b.request("produceData", {
            transportId: (_a = this.sendTransport) == null ? void 0 : _a.id,
            sctpStreamParameters,
            label,
            protocol,
            appData
          }));
          callback({ id: id2 });
        } catch (error) {
          errback(error);
        }
      }
    );
  }
  async createRecvTransport() {
    if (!this.mediasoupDevice || !this.socket)
      return;
    const transportInfo = await this.createMediasoupTransport(false, true);
    const { id, iceParameters, iceCandidates, dtlsParameters, sctpParameters } = transportInfo;
    this.recvTransport = this.mediasoupDevice.createRecvTransport({
      id,
      iceParameters,
      iceCandidates,
      dtlsParameters,
      sctpParameters,
      iceServers: this._turn
    });
    this.recvTransport.on(
      "connect",
      ({ dtlsParameters: dtlsParameters2 }, callback, errback) => {
        var _a, _b;
        (_b = this.socket) == null ? void 0 : _b.request("connectWebRtcTransport", {
          transportId: (_a = this.recvTransport) == null ? void 0 : _a.id,
          dtlsParameters: dtlsParameters2
        }).then(callback).catch(errback);
      }
    );
  }
  async loadMediasoupDevice() {
    if (!this.socket)
      return;
    this.mediasoupDevice = new Device();
    const routerRtpCapabilities = await this.socket.request(
      "getRouterRtpCapabilities"
    );
    await this.mediasoupDevice.load({ routerRtpCapabilities });
    logger_default.info("mediasoupDevice loaded");
    if (!this.mediasoupDevice.canProduce("video")) {
      logger_default.warn("cannot produce video");
    }
  }
};

export {
  RoomMediasoupClient
};
