import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/store/createLiveStreamingSlice.ts
var createLiveStreamingSlice = (set, get) => ({
  streamData: {},
  isLiveStreaming: false,
  livePlatform: "livepeer",
  setPlatform: (platform) => {
    set({
      livePlatform: platform
    });
  },
  startStreaming: (platform) => {
    const alreadyExits = get().streamData[platform];
    if (alreadyExits) {
      logger_default.info({
        message: `Live streaming already started for platform ${platform}`,
        platform
      });
      return;
    }
    const streamData = {
      isLive: false,
      isLoading: true,
      url: ""
    };
    set({
      streamData: {
        ...get().streamData,
        [platform]: streamData
      },
      livePlatform: platform
    });
  },
  stopStreaming: (platform) => {
    const platformData = get().streamData[platform];
    if (!platformData) {
      logger_default.info({
        message: `Tried to set stream loading for platform ${platform} but it was not found in the store`,
        meta: {
          platform
        }
      });
      return;
    }
    if (!platformData.isLive) {
      logger_default.info({
        message: `Tried to set stream loading for platform ${platform} but it was NOT live`,
        meta: {
          platform
        }
      });
      return;
    }
    const streamData = get().streamData;
    get().removeStreamData(platform);
    set({
      streamData
    });
  },
  setStreamData: (platform, streamData) => {
    logger_default.info({
      message: `Setting stream data for platform ${platform}`,
      meta: {
        platform,
        streamData
      }
    });
    set({
      streamData: {
        ...get().streamData,
        [platform]: streamData
      }
    });
  },
  removeStreamData: (platform) => {
    const streamData = get().streamData;
    if (!streamData) {
      logger_default.info({
        message: `Tried to remove stream data for platform ${platform} but it was not found in the store`,
        meta: {
          platform
        }
      });
      return;
    }
    logger_default.info({
      message: `Removing stream data for platform ${platform}`,
      meta: {
        platform
      }
    });
    delete streamData[platform];
    set({
      streamData
    });
  }
});
var createLiveStreamingSlice_default = createLiveStreamingSlice;

export {
  createLiveStreamingSlice_default
};
