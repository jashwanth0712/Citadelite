import {
  peerIdToHarkEvent_default
} from "./chunk-GAPPCOE7.mjs";

// src/store/createActiveSpeakerSlice.ts
import hark from "hark";
var createActiveSpeakerSlice = (set, get) => ({
  dominantSpeaker: "",
  peerIdToVolume: {},
  addStreamToHark: (track, peerId) => {
    const stream = new MediaStream();
    stream.addTrack(track);
    if (!stream.getAudioTracks()[0])
      return;
    const removeStreamFromHark = get().removeStreamFromHark;
    if (get().peerIdToVolume[peerId])
      removeStreamFromHark(peerId);
    const harkEvent = hark(stream, { interval: 1e3, play: false });
    set(() => ({
      peerIdToVolume: {
        ...get().peerIdToVolume,
        [peerId]: 0
      }
    }));
    peerIdToHarkEvent_default.set(peerId, harkEvent);
    harkEvent.on("volume_change", (dBs) => {
      const audioVolume = Math.round(Math.pow(10, dBs / 85) * 10);
      set(() => ({
        peerIdToVolume: {
          ...get().peerIdToVolume,
          [peerId]: audioVolume
        }
      }));
      const dominantSpeaker = get().dominantSpeaker;
      const activeSpeakerDb = get().peerIdToVolume[dominantSpeaker];
      if (!dominantSpeaker.length) {
        set(() => ({
          dominantSpeaker: peerId
        }));
        return;
      }
      if (audioVolume > (activeSpeakerDb || 0)) {
        if (peerId === dominantSpeaker)
          return;
        set(() => ({
          dominantSpeaker: peerId
        }));
      }
    });
  },
  removeStreamFromHark: (peerId) => {
    if (!get().peerIdToVolume[peerId])
      return;
    const harkEvent = peerIdToHarkEvent_default.get(peerId);
    if (!harkEvent)
      return;
    harkEvent.stop();
    const newpeerIdToVolume = get().peerIdToVolume;
    peerIdToHarkEvent_default.delete(peerId);
    delete newpeerIdToVolume[peerId];
    set(() => ({
      peerIdToVolume: newpeerIdToVolume
    }));
  }
});
var createActiveSpeakerSlice_default = createActiveSpeakerSlice;

export {
  createActiveSpeakerSlice_default
};
