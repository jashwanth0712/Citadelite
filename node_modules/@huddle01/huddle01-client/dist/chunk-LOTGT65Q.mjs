import {
  getState as getState2
} from "./chunk-64QX4MCI.mjs";
import {
  getState
} from "./chunk-DM7RIPEQ.mjs";
import {
  disableFigment
} from "./chunk-E3J4KYLN.mjs";
import {
  MediaConsumerTypesObj
} from "./chunk-LRNXPFD3.mjs";
import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/HuddleClient/lib/HuddleStore.ts
var HuddleStore = class {
  addPeerPort(peerId) {
    const { addPeerPort } = getState2();
    addPeerPort(peerId);
  }
  removePeerPort(peerId) {
    logger_default.info(`Removing peer Audio port ${peerId}`);
    const { removePeerPort } = getState2();
    removePeerPort(peerId);
  }
  getProducerState(producerType) {
    const mediaState = MediaConsumerTypesObj[producerType];
    return getState()[mediaState];
  }
  getAvatarUrl() {
    const { avatarUrl } = getState();
    return avatarUrl;
  }
  getCamStream() {
    const { stream } = getState();
    return stream;
  }
  getMicStream() {
    const { stream } = getState().micState;
    return stream;
  }
  getUserGeoLocation() {
    const { geo } = getState();
    return geo;
  }
  getDisplayName() {
    const { displayName } = getState();
    return displayName;
  }
  getPeerDisplayName(peerId) {
    var _a;
    const { peers } = getState();
    return (_a = peers[peerId]) == null ? void 0 : _a.displayName;
  }
  getParticipants() {
    const { peers } = getState();
    return peers;
  }
  getJoinedState() {
    const {
      roomState: { joined }
    } = getState();
    return joined;
  }
  async enableMicStream() {
    const { enableAudioStream } = getState();
    await enableAudioStream();
  }
  async enableCamStream() {
    const { enableStream } = getState();
    await enableStream();
  }
  disableMicStream() {
    const { pauseAudioTracks } = getState();
    pauseAudioTracks();
  }
  disableCamStream() {
    const { pauseTracks } = getState();
    pauseTracks();
  }
  toggleFigmentStream(toggle) {
    const { toggleFigmentStream } = getState();
    toggleFigmentStream(toggle);
  }
  changePeerAvatarUrl(peerId, avatarUrl) {
    const { setPeerAvatarUrl } = getState();
    setPeerAvatarUrl(peerId, avatarUrl);
  }
  setMeAvatarUrl(avatarUrl) {
    const { setAvatarUrl } = getState();
    setAvatarUrl(avatarUrl);
  }
  initMe(meInit) {
    const { initMe } = getState();
    initMe(meInit);
  }
  addProducerMedia(producerType, producer) {
    const { addProducerMedia } = getState();
    addProducerMedia(producerType, producer);
  }
  removeProducerMedia(producerType) {
    const { removeProducerMedia } = getState();
    logger_default.info("removed producer cam");
    removeProducerMedia(producerType);
  }
  updateProducerMedia(producerType, producer) {
    const { updateProducerMedia } = getState();
    updateProducerMedia(producerType, producer);
  }
  toggleProducerMedia(producerType, value) {
    const { toggleProducerMedia } = getState();
    toggleProducerMedia(producerType, value);
  }
  addPeer(peerId, peer) {
    const { addPeer } = getState();
    addPeer(peerId, peer);
  }
  removePeer(peerId) {
    const { removePeer } = getState();
    removePeer(peerId);
  }
  peerExists(peerId) {
    const { peers } = getState();
    return !!peers[peerId];
  }
  getPeerIds() {
    const { peers } = getState();
    return Object.keys(peers);
  }
  addConsumerMedia(peerId, consumerType, consumer) {
    const { addConsumerMedia } = getState();
    addConsumerMedia(peerId, consumerType, consumer);
  }
  removeConsumerMedia(peerId, consumerType) {
    const { removeConsumerMedia } = getState();
    removeConsumerMedia(peerId, consumerType);
  }
  pauseConsumerMedia(peerId, consumerType) {
    const { pauseConsumerMedia } = getState();
    pauseConsumerMedia(peerId, consumerType);
  }
  resumeConsumerMedia(peerId, consumerType) {
    const { resumeConsumerMedia } = getState();
    resumeConsumerMedia(peerId, consumerType);
  }
  updateProducer(producerType, value) {
    logger_default.info({ producerType, value });
  }
  enableScreenShare(peerId) {
    const { enableScreenShare } = getState();
    enableScreenShare(peerId);
  }
  disableScreenShare(gridView) {
    const { disableScreenShare } = getState();
    disableScreenShare(gridView);
  }
  setNetworkStats(stats) {
    const { setNetworkStats } = getState();
    setNetworkStats(stats);
  }
  setTest() {
    const { toggleIsTest } = getState();
    toggleIsTest();
  }
  toggleRecording(started) {
    const { toggleRecording } = getState();
    toggleRecording(started);
  }
  setNotifyRecording(key, value) {
    const { setNotifyRecording } = getState();
    setNotifyRecording(key, value);
  }
  setChat(message, toId, fromId, timestamp) {
    const { setChat } = getState();
    const chats = {
      peerId: fromId,
      displayName: this.getPeerDisplayName(fromId) || this.getDisplayName(),
      type: "text",
      timestamp,
      message
    };
    setChat(chats, toId);
  }
  togglePeerHandRaise(peerId, isHandRaised) {
    const { togglePeerHandRaise } = getState();
    togglePeerHandRaise(peerId, isHandRaised);
  }
  toggleMeHandRaise(isHandRaised) {
    const { toggleMeHandRaise } = getState();
    toggleMeHandRaise(isHandRaised);
  }
  addReaction(peerId, reaction) {
    const { addReaction } = getState();
    addReaction(peerId, reaction);
  }
  addMeReaction(reaction) {
    const { addMeReaction } = getState();
    addMeReaction(reaction);
  }
  addLobbyPeer(peers) {
    const { setLobbyPeers } = getState();
    setLobbyPeers(peers);
  }
  setDropState(dropReason) {
    const { setDropState } = getState();
    setDropState(dropReason);
  }
  setJoined() {
    const { setJoined } = getState();
    setJoined();
  }
  setRoomId(roomId) {
    const { setRoomId } = getState();
    setRoomId(roomId);
  }
  setCreatedAt(createdAt) {
    const { setCreatedAt } = getState();
    setCreatedAt(createdAt);
  }
  removeChat(peerId) {
    const { removeChat } = getState();
    removeChat(peerId);
  }
  increaseUnread(peerId) {
    const { increaseUnread } = getState();
    increaseUnread(peerId);
  }
  removeUnread(peerId) {
    const { removeUnread } = getState();
    removeUnread(peerId);
  }
  addSharedFile(sharedFile) {
    const { addSharedFile } = getState();
    addSharedFile(sharedFile);
  }
  setSharedFiles(sharedFiles) {
    const { setSharedFiles } = getState();
    setSharedFiles(sharedFiles);
  }
  isMicPaused() {
    const { isMicPaused } = getState();
    return isMicPaused;
  }
  initHostControls(hostId, meId, hostControls, coHostIds) {
    const { initHostControls } = getState();
    initHostControls(hostId, meId, hostControls, coHostIds);
  }
  setSingleHostControl(control, val) {
    const { setSingleHostControl } = getState();
    setSingleHostControl(control, val);
  }
  setHost(hostId) {
    const { setHost } = getState();
    setHost(hostId);
  }
  setCoHosts(coHostIds) {
    const { setCoHosts } = getState();
    setCoHosts(coHostIds);
  }
  setHostState(hostState) {
    logger_default.info("Setting host state: ", hostState);
    const { setHostState } = getState();
    setHostState(hostState);
  }
  increasePeerCount(value = 1) {
    const { increasePeerCount } = getState();
    increasePeerCount(value);
  }
  decreasePeerCount(value = 1) {
    const { decreasePeerCount } = getState();
    decreasePeerCount(value);
  }
  setStartRecording() {
    const { startRecording } = getState();
    startRecording();
  }
  setStopRecording() {
    const { stopRecording } = getState();
    stopRecording();
  }
  setMediaDevice(mediaDevice) {
    const { setMediaDevice } = getState();
    setMediaDevice(mediaDevice);
  }
  setAudioDevice(audioDevice) {
    const { setAudioDevice } = getState();
    setAudioDevice(audioDevice);
  }
  recordingStatus() {
    const { inProgress } = getState().recordingState;
    return inProgress;
  }
  updateRecording(recording) {
    const { updateRecordings } = getState();
    updateRecordings(recording);
  }
  setRecordings(recordings) {
    const { setRecordings } = getState();
    setRecordings(recordings);
  }
  setRecordingEnded() {
    const { endRecording } = getState();
    endRecording();
  }
  getIsRoomJoined() {
    const { roomState } = getState();
    return roomState.joined;
  }
  getMaxViewPortCount() {
    const { maxViewPortCount } = getState2();
    return maxViewPortCount;
  }
  getActiveViewPort() {
    const { activeViewPort } = getState();
    return activeViewPort;
  }
  getLastNActive() {
    const { isLastNActive } = getState();
    return isLastNActive;
  }
  getLastNPeerIds() {
    const { lastNPeerIds } = getState();
    return lastNPeerIds;
  }
  getSpaceLeftInLastN() {
    const lastNPeerIds = this.getLastNPeerIds();
    return this.getMaxViewPortCount() - lastNPeerIds.length;
  }
  setNotificationSounds(sounds) {
    const { setNotificationSounds } = getState();
    setNotificationSounds(sounds);
  }
  setLastNPeerIds(peerIds) {
    const { setLastNPeerIds } = getState();
    setLastNPeerIds(peerIds);
  }
  setLastNForNewPeerJoined() {
    if (this.getIsRoomJoined()) {
      logger_default.error({
        type: "error",
        message: "setLastNForNewPeerJoined() | Already Joined Room cannot set again",
        meta: {
          isJoined: this.getIsRoomJoined()
        }
      });
      return;
    }
    const peerIds = this.getPeerIds().slice(0, this.getMaxViewPortCount());
    this.setLastNPeerIds(peerIds);
    this.addActiveViewPort(peerIds.length);
    logger_default.info({
      logType: "setLastNForNewPeerJoined",
      message: "** Setting LastN for New Peer that Joined **",
      meta: {
        peerIds,
        lastN: this.getLastNPeerIds()
      }
    });
  }
  setRoomLockState(isRoomLocked) {
    const { setRoomLockState } = getState();
    setRoomLockState(isRoomLocked);
  }
  getRoomLockState() {
    const { isRoomLocked } = getState().roomState;
    return isRoomLocked;
  }
  addMissingPeerToLastN() {
    const { lastNPeerIds } = getState();
    const missingPeerToLastN = this.getPeerIds().filter(
      (peerId) => !lastNPeerIds.includes(peerId)
    )[0];
    if (missingPeerToLastN) {
      logger_default.info({
        logType: "addAllPeersToLastN",
        meta: { missingPeerToLastN },
        message: "This peer is not in lastNPeerIds, so we add it to lastNPeerIds"
      });
      this.addPeerToLastN(missingPeerToLastN);
    }
  }
  addPeerToLastN(peerId) {
    const { addPeerToLastN } = getState();
    addPeerToLastN(peerId);
  }
  removePeerFromLastN(peerId) {
    const { removePeerFromLastN } = getState();
    removePeerFromLastN(peerId);
  }
  addActiveViewPort(value = 1) {
    const { addActiveViewPort } = getState();
    addActiveViewPort(value);
  }
  removeActiveViewPort(value = 1) {
    const { removeActiveViewPort } = getState();
    removeActiveViewPort(value);
  }
  addStreamToHark(stream, peerId) {
    const { addStreamToHark } = getState();
    addStreamToHark(stream, peerId);
  }
  removeStreamFromHark(peerId) {
    const { removeStreamFromHark } = getState();
    removeStreamFromHark(peerId);
  }
  async disableAllCamStreams() {
    this.disableCamStream();
    this.toggleFigmentStream("disable");
    await disableFigment();
  }
  getActiveViewPortIds() {
    const { activeViewPortIds } = getState2();
    return activeViewPortIds;
  }
  getSpaceLeftInViewport() {
    const { getSpaceLeftInViewport } = getState2();
    return getSpaceLeftInViewport();
  }
  setActiveViewPort(activeViewPortIds) {
    const { setActiveViewPort } = getState2();
    setActiveViewPort(activeViewPortIds);
  }
  addPeerViewPort(peerId) {
    const { addPeerViewPort } = getState2();
    addPeerViewPort(peerId);
  }
  removePeerViewPort(peerId) {
    const { removePeerViewPort } = getState2();
    removePeerViewPort(peerId);
  }
  isLastNActive() {
    const { isLastNActive } = getState2();
    return isLastNActive;
  }
  activateLastN() {
    const { activateLastN } = getState2();
    activateLastN();
  }
  deactivateLastN() {
    const { deactivateLastN } = getState2();
    const { peers } = getState();
    const activeViewPorts = this.getActiveViewPortIds();
    const numOfViewPorts = activeViewPorts.size;
    Array.from(activeViewPorts).forEach((peerId) => {
      if (!peers[peerId]) {
        logger_default.warn({
          logType: "deactivateLastN",
          message: "Peer not found in peers | Removing from activeViewPorts",
          meta: {
            peerId
          }
        });
        this.removePeerViewPort(peerId);
      }
      if (numOfViewPorts === this.getMaxViewPortCount() - 1 && !activeViewPorts.has(peerId) && peers[peerId]) {
        logger_default.warn({
          logType: "deactivateLastN",
          message: "Peer not found in activeViewPorts | Adding to activeViewPorts",
          meta: {
            peerId
          }
        });
        this.addPeerViewPort(peerId);
      }
    });
    deactivateLastN();
  }
  setActiveViewPortForNewPeer() {
    if (this.getIsRoomJoined()) {
      logger_default.error({
        type: "error",
        message: "setLastNForNewPeerJoined() | Already Joined Room cannot set again",
        meta: {
          isJoined: this.getIsRoomJoined()
        }
      });
      return;
    }
    const activateLast = this.getPeerIds().length > this.getMaxViewPortCount();
    const peerIds = this.getPeerIds().slice(0, this.getMaxViewPortCount());
    this.setActiveViewPort(peerIds);
    if (activateLast)
      this.activateLastN();
  }
  startStreaming(platform) {
    const { startStreaming } = getState();
    startStreaming(platform);
  }
  setStreamPlatform(platform) {
    const { setPlatform } = getState();
    setPlatform(platform);
  }
  stopStreaming(platform) {
    const { stopStreaming } = getState();
    stopStreaming(platform);
  }
  setStreamData(platform, streamData) {
    const { setStreamData } = getState();
    setStreamData(platform, streamData);
  }
  setLayoutView(type) {
    const { setLayoutView } = getState();
    setLayoutView(type);
  }
  getLayout() {
    const { layout } = getState();
    return layout;
  }
  setScreenShareLayout(isBot = false, viewType) {
    const numOfPeersToSwitchView = isBot ? 3 : 2;
    if (this.getPeerIds().length === numOfPeersToSwitchView) {
      this.setLayoutView(viewType);
    }
  }
  getBandwidthSaver() {
    const { bandwidthSaver } = getState();
    return bandwidthSaver;
  }
};

export {
  HuddleStore
};
