import {
  VIDEO_CONSTRAINS
} from "./chunk-SQKZRIEU.mjs";
import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/store/createMediaSlice.ts
var createMediaSlice = (set, get) => ({
  mediaDevice: null,
  stream: null,
  streamError: null,
  deviceLoading: true,
  streamsArry: [],
  enableStream: async () => {
    var _a;
    if (get().stream) {
      logger_default.error({
        type: "error",
        msg: "createMediaSlice.enableStream() | No stream"
      });
      return;
    }
    const deviceEnabledConstrains = {
      video: {
        ...VIDEO_CONSTRAINS.hd,
        deviceId: (_a = get().mediaDevice) == null ? void 0 : _a.deviceId
      }
    };
    await navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {
      const _newStreamArray = [...get().streamsArry, _stream];
      set(() => ({
        stream: _stream,
        deviceLoading: false,
        streamsArry: _newStreamArray
      }));
    }).catch((_error) => {
      set(() => ({
        streamError: {
          type: _error.name,
          blocked: true
        },
        deviceLoading: false
      }));
    });
    if (!get().mediaDevice) {
      const mediaDevices = await get().getMediaDevices();
      logger_default.info({ mediaDevices });
      get().setMediaDevice(mediaDevices[0]);
    }
  },
  getMediaDevices: async () => {
    const { setStreamError } = get();
    try {
      const mediaDevices = await navigator.mediaDevices.enumerateDevices();
      const devices = mediaDevices.filter(({ kind }) => kind === "videoinput");
      return devices;
    } catch (err) {
      setStreamError(err == null ? void 0 : err.name);
      return [];
    }
  },
  setMediaDevice: (device) => {
    set(() => ({
      mediaDevice: device
    }));
    logger_default.info("set");
  },
  switchMediaStream: (stream) => {
    logger_default.info({
      type: "info",
      msg: "switchMediaStream() | Switching media stream"
    });
    if (!stream) {
      logger_default.info({
        type: "info",
        msg: "switchMediaStream() | No stream Found using default Stream"
      });
      return;
    }
    get().pauseTracks();
    get().setMediaStream(stream);
  },
  setMediaStream: (stream) => {
    logger_default.info({
      type: "info",
      msg: "setMediaStream() | Setting media stream",
      stream
    });
    set(() => ({ stream }));
  },
  pauseTracks: () => {
    const { stream } = get();
    if (!stream)
      return;
    get().streamsArry.forEach((stream2) => {
      stream2.getTracks().forEach((track) => {
        track.stop();
      });
    });
    stream.getTracks().forEach((track) => track.stop());
    set(() => ({ stream: null, streamsArry: [] }));
  },
  setDeviceLoading: (loading) => {
    set(() => ({ deviceLoading: loading }));
  },
  setStreamError: (error) => {
    set(() => ({
      streamError: {
        type: error || "UnknownError",
        blocked: error === "NotAllowedError"
      }
    }));
  }
});
var createMediaSlice_default = createMediaSlice;

export {
  createMediaSlice_default
};
