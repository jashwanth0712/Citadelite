// src/store/createRecordingSlice.ts
var createRecordingSlice = (set) => ({
  recordingState: {
    inProgress: false,
    processing: false,
    started: false
  },
  uploadToIpfs: false,
  recordings: [],
  newRecording: null,
  notifyRecording: { started: false, finished: false },
  startRecording: () => {
    set((state) => ({
      recordingState: { ...state.recordingState, inProgress: true }
    }));
  },
  toggleRecording: (started) => {
    set((state) => ({
      recordingState: {
        ...state.recordingState,
        started
      }
    }));
  },
  stopRecording: () => {
    set((state) => ({
      recordingState: {
        ...state.recordingState,
        inProgress: false,
        processing: true
      }
    }));
  },
  updateRecordings: (recording) => {
    set((state) => ({
      recordings: [...state.recordings, recording],
      newRecording: recording,
      recordingState: {
        ...state.recordingState,
        processing: false
      },
      uploadToIpfs: recording.uploadToIpfs
    }));
  },
  setRecordings: (recordings) => {
    set((state) => ({
      ...state,
      recordings
    }));
  },
  endRecording: () => {
    set((state) => ({
      recordingState: {
        ...state.recordingState,
        inProgress: false,
        processing: false
      }
    }));
  },
  removeNewrecording: () => {
    set(() => ({ newRecording: null }));
  },
  setNotifyRecording: (key, value) => {
    set((state) => ({
      notifyRecording: {
        ...state.notifyRecording,
        [key]: value
      }
    }));
  }
});
var createRecordingSlice_default = createRecordingSlice;

export {
  createRecordingSlice_default
};
