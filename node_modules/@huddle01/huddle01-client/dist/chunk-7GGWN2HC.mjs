import {
  randomId
} from "./chunk-7JMHGAJI.mjs";

// src/store/createChatSlice.ts
var createChatSlice = (set, get) => ({
  unread: {
    mainRoom: 0
  },
  chat: {
    mainRoom: []
  },
  reactions: {},
  sharedFilesArr: [],
  notificationSounds: "",
  chatNotif: true,
  peerJoinNotif: true,
  peerLeaveNotif: true,
  setchatNotif: (value) => set(() => ({ chatNotif: value })),
  setpeerJoinNotif: (value) => set(() => ({ peerJoinNotif: value })),
  setpeerLeaveNotif: (value) => set(() => ({ peerLeaveNotif: value })),
  setNotificationSounds: (notificationSounds) => {
    set(() => ({ notificationSounds }));
  },
  setChat: (chat, toId, err) => {
    const prevChats = get().chat[toId];
    const newChats = prevChats ? [
      ...prevChats,
      {
        ...chat,
        id: randomId(),
        error: err ? err.error : { isError: false }
      }
    ] : [
      {
        ...chat,
        id: randomId(),
        error: err ? err.error : { isError: false }
      }
    ];
    set(
      () => ({
        chat: {
          ...get().chat,
          [toId]: newChats
        }
      }),
      false
    );
  },
  removeChat: (toId) => {
    const prevChats = get().chat;
    delete prevChats[toId];
    set(() => ({ chat: prevChats }));
  },
  increaseUnread: (chatRoomId) => {
    const unread = get().unread[chatRoomId] || 0;
    set(
      () => ({
        unread: {
          ...get().unread,
          [chatRoomId]: unread + 1
        }
      }),
      false
    );
  },
  removeUnread: (chatRoomId) => {
    const prevUnread = get().unread;
    delete prevUnread[chatRoomId];
    set(() => ({
      unread: {
        ...get().unread,
        [chatRoomId]: 0
      }
    }));
  },
  addSharedFile: (sharedFile) => {
    set((state) => ({
      sharedFilesArr: [...state.sharedFilesArr, sharedFile]
    }));
  },
  setSharedFiles: (sharedFiles) => {
    set(() => ({
      sharedFilesArr: sharedFiles
    }));
  }
});
var createChatSlice_default = createChatSlice;

export {
  createChatSlice_default
};
