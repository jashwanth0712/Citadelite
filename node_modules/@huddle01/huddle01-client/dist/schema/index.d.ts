import { types } from 'mediasoup-client';
import { setState, getState } from '../store/store.js';
import { setState as setState$1, getState as getState$1 } from '../store/portStore/usePortStore.js';
import { MediaConsumer } from '../store/storeTypes.js';
export { EDisableHostControl, EEnableHostControl } from './enums/EHostControlType.js';
import 'zustand';

interface ProtooUrlData {
    roomId: string;
    peerId: string;
    apiKey: string | undefined;
}
interface HuddleClientStore {
    mediasoupDevice: null | types.Device;
    displayName: string;
    avatarUrl: string;
    consume: boolean;
    produce: boolean;
    consumers: {
        [key: string]: MediaConsumer;
    };
    producers: {
        [key: string]: MediaConsumer;
    };
    features: {
        recording: Recordingfeat;
    };
}
interface Recordingfeat {
    state?: null | 'starting' | 'recording' | 'processing';
    recordingUrl?: string;
    ipfsUrl?: string;
}
declare type SetHuddleClientStore = React.Dispatch<React.SetStateAction<HuddleClientStore>>;
declare type SetHuddleStoreType = typeof setState;
declare type GetHuddleStoreType = typeof getState;
declare type SetPortStoreType = typeof setState$1;
declare type GetPortStoreType = typeof getState$1;
interface JoinParams {
    displayName: string;
    avatarUrl: string;
}
interface ClientState {
    recvTransport: null | types.Transport;
    sendTransport: null | types.Transport;
}
interface RequestMethods {
    [key: string]: () => void;
}
interface NotifMethods {
    [key: string]: () => void;
}
interface LastNData {
    lastNPeers: string[];
    mostInactivePeerIdInLastN: string;
}
declare type TUserData = {
    displayName: string;
    avatarUrl: string;
    geoLocation: string;
};
declare type TWalletData = {
    address: string;
    wallet: string | undefined;
    ens: string;
};
declare type TLiveStreamObject = {
    streamLink: string;
    streamKey: string;
    streamName: string;
};

export { ClientState, GetHuddleStoreType, GetPortStoreType, HuddleClientStore, JoinParams, LastNData, NotifMethods, ProtooUrlData, Recordingfeat, RequestMethods, SetHuddleClientStore, SetHuddleStoreType, SetPortStoreType, TLiveStreamObject, TUserData, TWalletData };
