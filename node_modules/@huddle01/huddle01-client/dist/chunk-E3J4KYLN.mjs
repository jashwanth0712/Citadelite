import {
  logger_default
} from "./chunk-IBGL6YYT.mjs";

// src/utils/figment.ts
var figment;
var initFigment = async (stream) => {
  if (figment && figment.isActive()) {
    logger_default.info({
      type: "error",
      msg: "initFigment() | Figment is already active"
    });
    return stream;
  }
  figment = new window.FigmentApp({
    customerKey: "d41d8cd98f00b204e9800998ecf8427e"
  });
  const outputFigmentTrack = await figment.activate({
    activeApp: "VB",
    vbQuality: "performance",
    inputMediaStream: {
      mediaStream: stream,
      stopTracksOnDestruction: true
    }
  });
  logger_default.info({
    type: "info",
    msg: "initFigment() | Figment is activated"
  });
  return outputFigmentTrack;
};
var changeFigBg = async (type, bgImgUrl) => {
  if (!figment) {
    logger_default.error({
      type: "error",
      msg: "changeFigBg() | Figment is not initialized"
    });
    return;
  }
  if (!figment.isActive()) {
    logger_default.error({
      type: "error",
      msg: "changeFigBg() | Figment is not active"
    });
    return;
  }
  if (type === "image" && !bgImgUrl) {
    logger_default.error({
      type: "error",
      msg: " changeFigBg | bgImageUrl is required"
    });
    return;
  }
  try {
    if (type === "blur") {
      figment.setOption("blur_background", "balanced");
    } else if (type === "image") {
      logger_default.info({
        type: "info",
        msg: "changeFigBg() | Changing background image"
      });
      const figmentObj = {
        type,
        urlSrc: bgImgUrl || ""
      };
      localStorage.setItem("huddle-figment", JSON.stringify(figmentObj));
      figment.setOption("set_background_img", bgImgUrl);
    }
  } catch (err) {
    logger_default.error(err);
  }
};
var saveFigmentinLocalStorage = (type, urlSrc) => {
  const figmentObj = {
    type,
    urlSrc: urlSrc || ""
  };
  localStorage.setItem("huddle-figment", JSON.stringify(figmentObj));
};
var disableFigment = async () => {
  try {
    if (figment) {
      if (figment.isActive()) {
        await figment.deactivate();
      }
    }
  } catch (err) {
    logger_default.error(err);
  }
};

export {
  initFigment,
  changeFigBg,
  saveFigmentinLocalStorage,
  disableFigment
};
