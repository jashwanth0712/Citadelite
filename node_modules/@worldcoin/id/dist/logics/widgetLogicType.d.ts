import type { Logic } from 'kea';
import type { AppProps, ModalView, QRContentInterface } from '../types';
export interface widgetLogicType extends Logic {
    actionCreators: {
        processProps: (props: AppProps) => {
            type: 'process props (logic.widgetLogic)';
            payload: {
                props: AppProps;
            };
        };
        disableWidget: () => {
            type: 'disable widget (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        enableWidget: () => {
            type: 'enable widget (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        initWidget: () => {
            type: 'init widget (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        unInitWidget: () => {
            type: 'un init widget (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        finishWidgetLoading: () => {
            type: 'finish widget loading (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        activateModal: () => {
            type: 'activate modal (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        disableModal: () => {
            type: 'disable modal (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        toggleModal: () => {
            type: 'toggle modal (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        initTelemetry: () => {
            type: 'init telemetry (logic.widgetLogic)';
            payload: {
                value: true;
            };
        };
        setModalView: (view: ModalView) => {
            type: 'set modal view (logic.widgetLogic)';
            payload: {
                view: ModalView;
            };
        };
        setQrCodeContent: (content: QRContentInterface) => {
            type: 'set qr code content (logic.widgetLogic)';
            payload: {
                content: QRContentInterface;
            };
        };
        setIsDebug: (isDebug: boolean) => {
            type: 'set is debug (logic.widgetLogic)';
            payload: {
                isDebug: boolean;
            };
        };
    };
    actionKeys: {
        'process props (logic.widgetLogic)': 'processProps';
        'disable widget (logic.widgetLogic)': 'disableWidget';
        'enable widget (logic.widgetLogic)': 'enableWidget';
        'init widget (logic.widgetLogic)': 'initWidget';
        'un init widget (logic.widgetLogic)': 'unInitWidget';
        'finish widget loading (logic.widgetLogic)': 'finishWidgetLoading';
        'activate modal (logic.widgetLogic)': 'activateModal';
        'disable modal (logic.widgetLogic)': 'disableModal';
        'toggle modal (logic.widgetLogic)': 'toggleModal';
        'init telemetry (logic.widgetLogic)': 'initTelemetry';
        'set modal view (logic.widgetLogic)': 'setModalView';
        'set qr code content (logic.widgetLogic)': 'setQrCodeContent';
        'set is debug (logic.widgetLogic)': 'setIsDebug';
    };
    actionTypes: {
        processProps: 'process props (logic.widgetLogic)';
        disableWidget: 'disable widget (logic.widgetLogic)';
        enableWidget: 'enable widget (logic.widgetLogic)';
        initWidget: 'init widget (logic.widgetLogic)';
        unInitWidget: 'un init widget (logic.widgetLogic)';
        finishWidgetLoading: 'finish widget loading (logic.widgetLogic)';
        activateModal: 'activate modal (logic.widgetLogic)';
        disableModal: 'disable modal (logic.widgetLogic)';
        toggleModal: 'toggle modal (logic.widgetLogic)';
        initTelemetry: 'init telemetry (logic.widgetLogic)';
        setModalView: 'set modal view (logic.widgetLogic)';
        setQrCodeContent: 'set qr code content (logic.widgetLogic)';
        setIsDebug: 'set is debug (logic.widgetLogic)';
    };
    actions: {
        processProps: (props: AppProps) => void;
        disableWidget: () => void;
        enableWidget: () => void;
        initWidget: () => void;
        unInitWidget: () => void;
        finishWidgetLoading: () => void;
        activateModal: () => void;
        disableModal: () => void;
        toggleModal: () => void;
        initTelemetry: () => void;
        setModalView: (view: ModalView) => void;
        setQrCodeContent: (content: QRContentInterface) => void;
        setIsDebug: (isDebug: boolean) => void;
    };
    defaults: {
        isWidgetInitialized: boolean;
        isWidgetEnabled: boolean;
        widgetLoading: boolean;
        qrCodeContent: QRContentInterface | null;
        isDebug: boolean;
        isModalVisible: boolean;
        modalView: ModalView;
    };
    events: {
        afterMount: () => void;
    };
    key: undefined;
    listeners: {
        processProps: ((action: {
            type: 'process props (logic.widgetLogic)';
            payload: {
                props: AppProps;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: ['logic', 'widgetLogic'];
    pathString: 'logic.widgetLogic';
    props: AppProps;
    reducer: (state: any, action: any, fullState: any) => {
        isWidgetInitialized: boolean;
        isWidgetEnabled: boolean;
        widgetLoading: boolean;
        qrCodeContent: QRContentInterface | null;
        isDebug: boolean;
        isModalVisible: boolean;
        modalView: ModalView;
    };
    reducers: {
        isWidgetInitialized: (state: boolean, action: any, fullState: any) => boolean;
        isWidgetEnabled: (state: boolean, action: any, fullState: any) => boolean;
        widgetLoading: (state: boolean, action: any, fullState: any) => boolean;
        qrCodeContent: (state: QRContentInterface | null, action: any, fullState: any) => QRContentInterface | null;
        isDebug: (state: boolean, action: any, fullState: any) => boolean;
        isModalVisible: (state: boolean, action: any, fullState: any) => boolean;
        modalView: (state: ModalView, action: any, fullState: any) => ModalView;
    };
    selector: (state: any) => {
        isWidgetInitialized: boolean;
        isWidgetEnabled: boolean;
        widgetLoading: boolean;
        qrCodeContent: QRContentInterface | null;
        isDebug: boolean;
        isModalVisible: boolean;
        modalView: ModalView;
    };
    selectors: {
        isWidgetInitialized: (state: any, props?: any) => boolean;
        isWidgetEnabled: (state: any, props?: any) => boolean;
        widgetLoading: (state: any, props?: any) => boolean;
        qrCodeContent: (state: any, props?: any) => QRContentInterface | null;
        isDebug: (state: any, props?: any) => boolean;
        isModalVisible: (state: any, props?: any) => boolean;
        modalView: (state: any, props?: any) => ModalView;
    };
    sharedListeners: {};
    values: {
        isWidgetInitialized: boolean;
        isWidgetEnabled: boolean;
        widgetLoading: boolean;
        qrCodeContent: QRContentInterface | null;
        isDebug: boolean;
        isModalVisible: boolean;
        modalView: ModalView;
    };
    _isKea: true;
    _isKeaWithKey: false;
}
