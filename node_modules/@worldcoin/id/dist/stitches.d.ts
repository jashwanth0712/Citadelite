/// <reference types="react" />
export declare const globalStyles: () => string;
export declare const styled: <Type extends import("@stitches/react/types/util").Function | import("react").ComponentType<any> | keyof JSX.IntrinsicElements, Composers extends (string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = import("@stitches/react/types/css-util").CSS<{
    smDown: "(max-width: 768px)";
}, {
    colors: {
        grey5: string;
        grey6: string;
        teal: string;
        primary: string;
        primaryA50: string;
        primaryA10: string;
        onPrimary: string;
        gradientFrom: string;
        gradientTo: string;
    };
    radii: {
        xl: string;
        lg: string;
        md: string;
        sm: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    smDown: "(max-width: 768px)";
}, import("@stitches/react/types/css-util").CSS<{
    smDown: "(max-width: 768px)";
}, {
    colors: {
        grey5: string;
        grey6: string;
        teal: string;
        primary: string;
        primaryA50: string;
        primaryA10: string;
        onPrimary: string;
        gradientFrom: string;
        gradientTo: string;
    };
    radii: {
        xl: string;
        lg: string;
        md: string;
        sm: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>, css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS = import("@stitches/react/types/css-util").CSS<{
    smDown: "(max-width: 768px)";
}, {
    colors: {
        grey5: string;
        grey6: string;
        teal: string;
        primary: string;
        primaryA50: string;
        primaryA10: string;
        onPrimary: string;
        gradientFrom: string;
        gradientTo: string;
    };
    radii: {
        xl: string;
        lg: string;
        md: string;
        sm: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    smDown: "(max-width: 768px)";
}, CSS>, getCssText: () => string;
export declare const lightTheme: string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<{
    colors: {
        color: string;
        background: string;
        buttonDefaultBg: string;
        buttonDefaultColor: string;
        buttonNeutralBg: string;
        buttonNeutralColor: string;
        buttonPrimaryBg: string;
        buttonPrimaryColor: string;
        buttonGradientFrom: string;
        buttonGradientTo: string;
        circleDefaultBg: string;
        circleDefaultColor: string;
        circlePrimaryBg: string;
        circlePrimaryColor: string;
        captchaColor: string;
        captchaGradientFrom: string;
        captchaGradientTo: string;
        devButtonBg: string;
        devButtonBorder: string;
        loaderBg: string;
        loaderFg: string;
        qrcode: string;
        qrcodeBorder: string;
    };
}, "">;
export declare const darkTheme: string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<{
    colors: {
        color: string;
        background: string;
        buttonDefaultBg: string;
        buttonDefaultColor: string;
        buttonNeutralBg: string;
        buttonNeutralColor: string;
        buttonPrimaryBg: string;
        buttonPrimaryColor: string;
        buttonGradientFrom: string;
        buttonGradientTo: string;
        circleDefaultBg: string;
        circleDefaultColor: string;
        circlePrimaryBg: string;
        circlePrimaryColor: string;
        captchaColor: string;
        captchaGradientFrom: string;
        captchaGradientTo: string;
        devButtonBg: string;
        devButtonBorder: string;
        loaderBg: string;
        loaderFg: string;
        qrcode: string;
        qrcodeBorder: string;
    };
}, "">;
