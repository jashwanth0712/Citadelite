/// <reference types="react" />
import { ComponentProps } from '@stitches/react';
declare const OverlayRoot: import("framer-motion").CustomDomComponent<Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "css"> & import("@stitches/react/types/styled-component").TransformProps<{}, {
    smDown: "(max-width: 768px)";
}> & {
    css?: import("@stitches/react/types/css-util").CSS<{
        smDown: "(max-width: 768px)";
    }, {
        colors: {
            grey5: string;
            grey6: string;
            teal: string;
            primary: string;
            primaryA50: string;
            primaryA10: string;
            onPrimary: string;
            gradientFrom: string;
            gradientTo: string;
        };
        radii: {
            xl: string;
            lg: string;
            md: string;
            sm: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}> | undefined;
}>;
export interface OverlayProps extends ComponentProps<typeof OverlayRoot> {
    open: boolean;
    onClose: () => void;
}
export declare function Overlay(props: OverlayProps): JSX.Element;
export {};
