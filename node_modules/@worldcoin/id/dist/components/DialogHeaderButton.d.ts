/// <reference types="react" />
export declare const SDialogHeaderButton: import("framer-motion").CustomDomComponent<Omit<Pick<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement>> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, "css" | "bordered"> & import("@stitches/react/types/styled-component").TransformProps<{
    bordered?: boolean | "true" | undefined;
}, {
    smDown: "(max-width: 768px)";
}> & {
    css?: import("@stitches/react/types/css-util").CSS<{
        smDown: "(max-width: 768px)";
    }, {
        colors: {
            grey5: string;
            grey6: string;
            teal: string;
            primary: string;
            primaryA50: string;
            primaryA10: string;
            onPrimary: string;
            gradientFrom: string;
            gradientTo: string;
        };
        radii: {
            xl: string;
            lg: string;
            md: string;
            sm: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}> | undefined;
}>;
interface DialogHeaderButtonProps {
    bordered?: boolean;
    children?: React.ReactNode;
    onClick?: () => void;
}
export declare const DialogHeaderButton: (props: DialogHeaderButtonProps) => JSX.Element;
export {};
