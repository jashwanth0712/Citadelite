/// <reference types="react" />
export declare const Button: import("framer-motion").CustomDomComponent<Omit<Pick<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement>> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, "color" | "css" | "size" | "variant" | "fullWidth"> & import("@stitches/react/types/styled-component").TransformProps<{
    variant?: "link" | "default" | undefined;
    size?: "xl" | "lg" | "sm" | undefined;
    color?: "primary" | "default" | "gradient" | "neutral" | undefined;
    fullWidth?: boolean | "true" | undefined;
}, {
    smDown: "(max-width: 768px)";
}> & {
    css?: import("@stitches/react/types/css-util").CSS<{
        smDown: "(max-width: 768px)";
    }, {
        colors: {
            grey5: string;
            grey6: string;
            teal: string;
            primary: string;
            primaryA50: string;
            primaryA10: string;
            onPrimary: string;
            gradientFrom: string;
            gradientTo: string;
        };
        radii: {
            xl: string;
            lg: string;
            md: string;
            sm: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}> | undefined;
}>;
export declare const ButtonLink: import("framer-motion").CustomDomComponent<Omit<Pick<import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "key" | keyof import("react").AnchorHTMLAttributes<HTMLAnchorElement>> & {
    ref?: ((instance: HTMLAnchorElement | null) => void) | import("react").RefObject<HTMLAnchorElement> | null | undefined;
}, "color" | "css" | "size" | "variant" | "fullWidth"> & import("@stitches/react/types/styled-component").TransformProps<{
    variant?: "link" | "default" | undefined;
    size?: "xl" | "lg" | "sm" | undefined;
    color?: "primary" | "default" | "gradient" | "neutral" | undefined;
    fullWidth?: boolean | "true" | undefined;
}, {
    smDown: "(max-width: 768px)";
}> & {
    css?: import("@stitches/react/types/css-util").CSS<{
        smDown: "(max-width: 768px)";
    }, {
        colors: {
            grey5: string;
            grey6: string;
            teal: string;
            primary: string;
            primaryA50: string;
            primaryA10: string;
            onPrimary: string;
            gradientFrom: string;
            gradientTo: string;
        };
        radii: {
            xl: string;
            lg: string;
            md: string;
            sm: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}> | undefined;
}>;
