"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInternalPostHogInstance = void 0;
const package_json_1 = require("../package.json");
const utils_1 = require("./utils/utils");
const context_1 = require("./utils/context");
const lz_string_js_1 = require("./utils/lz-string.js");
const defaultOptions = {
    apiHost: 'https://app.posthog.com',
    maxQueueLength: 1,
    optedIn: true,
};
function createInternalPostHogInstance(apiKey, options, globalThis) {
    const session = {};
    const anonymousId = utils_1.generateUUID(globalThis);
    let postHogInstance = {
        options: Object.assign(Object.assign(Object.assign({}, defaultOptions), options), { apiKey }),
        session: Object.assign({ anonymousId: anonymousId, distinctId: anonymousId }, session),
        getDistinctId() {
            return postHogInstance.session.distinctId;
        },
        getContextProperties() {
            return {
                $lib: 'posthog-js-lite',
                $lib_version: package_json_1.version,
            };
        },
        optedIn() {
            return postHogInstance.options.optedIn;
        },
        optIn() {
            postHogInstance.options.optedIn = true;
            postHogInstance.flush();
        },
        optOut() {
            postHogInstance.options.optedIn = false;
        },
        capture(event, properties = {}) {
            postHogInstance.enqueue({
                event,
                distinct_id: postHogInstance.getDistinctId(),
                timestamp: utils_1.currentISOTime(),
                properties: Object.assign(Object.assign({}, context_1.getContext(globalThis)), properties),
            });
        },
        identify(distinctId, userProperties = {}) {
            postHogInstance.enqueue({
                event: '$identify',
                distinct_id: distinctId || postHogInstance.session.anonymousId,
                timestamp: utils_1.currentISOTime(),
                $set: Object.assign({}, userProperties),
                properties: Object.assign(Object.assign({}, context_1.getContext(globalThis)), { $anon_distinct_id: postHogInstance.session.anonymousId }),
            });
            if (distinctId) {
                postHogInstance.session.distinctId = distinctId;
            }
        },
        queue: [],
        enqueue(apiRequest) {
            postHogInstance.queue.push(apiRequest);
            if (postHogInstance.optedIn() && postHogInstance.queue.length >= postHogInstance.options.maxQueueLength) {
                postHogInstance.flush();
            }
        },
        flush() {
            let queue = postHogInstance.queue;
            postHogInstance.queue = [];
            postHogInstance.makeRequest(queue);
        },
        makeRequest: function (events) {
            return __awaiter(this, void 0, void 0, function* () {
                const requestData = {
                    api_key: postHogInstance.options.apiKey,
                    batch: events,
                    sent_at: utils_1.currentISOTime(),
                };
                const url = `${postHogInstance.options.apiHost}/e/?ip=1&_=${utils_1.currentTimestamp()}&v=${package_json_1.version}`;
                const payload = JSON.stringify(requestData);
                const compressedPayload = lz_string_js_1.LZString.compressToBase64(payload);
                const fetchOptions = {
                    method: 'POST',
                    mode: 'no-cors',
                    credentials: 'omit',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `data=${encodeURIComponent(compressedPayload)}&compression=lz64`,
                };
                try {
                    const rawResponse = yield postHogInstance.options.fetch(url, fetchOptions);
                    const body = yield rawResponse.text();
                }
                catch (error) {
                    throw error;
                }
            });
        },
    };
    return postHogInstance;
}
exports.createInternalPostHogInstance = createInternalPostHogInstance;
//# sourceMappingURL=index.js.map