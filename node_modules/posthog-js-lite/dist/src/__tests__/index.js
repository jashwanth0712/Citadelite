"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const lz_string_1 = require("../utils/lz-string");
const testWindow = {
    navigator: {
        userAgent: 'not me / Mozilla',
    },
    document: {
        referrer: '',
    },
    location: {
        href: 'http://example.com/',
        host: 'example.com',
        pathname: '/',
    },
    screen: {
        width: 640,
        height: 480,
    },
};
test('capture makes a window.fetch call', () => {
    expect(true).toBe(true);
    const fetchCalled = [];
    const postHog = index_1.createInternalPostHogInstance('API_KEY_WAS_HERE', {
        fetch: (url, options) => __awaiter(void 0, void 0, void 0, function* () {
            fetchCalled.push({ url, options });
        }),
    }, testWindow);
    postHog.capture('hi there!');
    expect(fetchCalled.length).toBe(1);
    expect(fetchCalled[0].url).toMatch(/^https:\/\/app\.posthog\.com\/e\/\?ip=1&_=[0-9]+&v=[0-9\.a-z\-]+$/);
    expect(fetchCalled[0].options.method).toBe('POST');
    const bodyText = decodeURIComponent(fetchCalled[0].options.body.split('&')[0].split('=')[1]);
    const body = JSON.parse(lz_string_1.LZString.decompressFromBase64(bodyText));
    expect(body.api_key).toBe('API_KEY_WAS_HERE');
    expect(body.batch[0].event).toBe('hi there!');
});
//# sourceMappingURL=index.js.map